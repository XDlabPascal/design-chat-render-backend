// index.js â€” backend Design-Chat (option 2 : fetch natif)
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import nodemailer from 'nodemailer';

dotenv.config();

const app  = express();
const PORT = process.env.PORT || 10000;

app.use(cors());
app.use(express.json());

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ PROMPT systÃ¨me â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
const systemPrompt = `
Tu es un expert en design UX/UI et en pÃ©dagogie.

OBJECTIF
--------
Ã‰valuer le niveau global dâ€™un apprenant en conception centrÃ©e utilisateur,
puis lui recommander des ressources adaptÃ©es Ã  son niveau.

RÃˆGLES DU DIALOGUE
------------------
1. Pose EXACTEMENT 5 questions simples, ouvertes et progressives.
2. Pose UNE seule question Ã  la fois ; attends la rÃ©ponse avant de poursuivre.
3. Ne donne aucun indice de correction avant la fin des 5 questions.
4. Si la rÃ©ponse est vide ou hors-sujet, reformule ou clarifie la question.

Ã€ LA FIN DES 5 QUESTIONS
------------------------
Quand tu as reÃ§u les 5 rÃ©ponses, gÃ©nÃ¨re :

**1. UNE SYNTHÃˆSE DU NIVEAU :**
- Niveau global : <dÃ©butant | intermÃ©diaire | avancÃ©>
- Points forts : <liste concise>
- Points Ã  amÃ©liorer : <liste concise>

**2. UNE PLAYLIST DE 10 VIDÃ‰OS YOUTUBE EN FRANÃ‡AIS :**
- Donne UNIQUEMENT des liens YouTube en franÃ§ais (ou sous-titres FR).
- Format : Â« <Titre> â€“ <URL> Â».

DÃ‰BUT DE LA CONVERSATION
------------------------
Commence immÃ©diatement avec cette premiÃ¨re question :
Â« Pour commencer, peux-tu expliquer ce que signifie pour toi lâ€™expÃ©rience utilisateur (UX) ? Â»
`;

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ APPEL Mistral â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
async function askMistral(history) {
  const resp = await fetch('https://api.mistral.ai/v1/chat/completions', {
    method: 'POST',
    headers: {
      Authorization : `Bearer ${process.env.MISTRAL_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model   : 'mistral-medium',
      messages: history,
      temperature: 0.7
    })
  });

  if (!resp.ok) {
    throw new Error(`Mistral : ${resp.status} ${await resp.text()}`);
  }
  const data = await resp.json();
  return data.choices[0].message.content;
}

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Utilitaires â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
function extractYouTube(text) {
  const re = /(https?:\/\/(?:www\.)?youtube\.com\/watch\?v=[\w-]+)/g;
  return text.match(re) || [];
}

/* â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Routes â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
app.post('/message', async (req, res) => {
  const { messages = [], email = '' } = req.body;

  try {
    // Construit lâ€™historique pour Mistral
    const hist = [
      { role: 'system', content: systemPrompt },
      ...messages.map(m => ({ role: m.sender === 'user' ? 'user' : 'assistant', content: m.text }))
    ];

    const answer = await askMistral(hist);

    // Nombre de rÃ©ponses utilisateur dÃ©jÃ  envoyÃ©es
    const userTurns = messages.filter(m => m.sender === 'user').length;

    if (userTurns >= 5) {
      // SynthÃ¨se + playlist
      const summary = {
        synthese: answer,
        niveau  : answer.includes('dÃ©butant') ? 'DÃ©butant' :
                  answer.includes('intermÃ©diaire') ? 'IntermÃ©diaire' : 'AvancÃ©',
        videos  : extractYouTube(answer)
      };
      return res.json({ phase: 'summary', summary });
    }

    // Sinon on continue le chat
    res.json({ phase: 'chat', reply: answer });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Erreur IA' });
  }
});

app.post('/send-summary', async (req, res) => {
  const { email, summary } = req.body;
  if (!email) return res.status(400).json({ error: 'email manquant' });

  try {
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth   : { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS }
    });

    const html = `
      <h2>ðŸŽ¯ Niveau estimÃ© : ${summary.niveau}</h2>
      <p>${summary.synthese.replace(/\n/g, '<br>')}</p>
      <h3>ðŸŽ¥ Playlist recommandÃ©e :</h3>
      <ul>${summary.videos.map(v => `<li><a href="${v}">${v}</a></li>`).join('')}</ul>
    `;

    await transporter.sendMail({
      from   : process.env.EMAIL_USER,
      to     : email,
      subject: 'Votre synthÃ¨se UX/UI',
      html
    });

    res.json({ success: true });
  } catch (err) {
    console.error('Email :', err);
    res.status(500).json({ error: 'Erreur e-mail' });
  }
});

app.get('/', (_, res) => res.send('âœ… API Design-Chat opÃ©rationnelle'));

app.listen(PORT, () => console.log(`âœ… Serveur lancÃ© sur port ${PORT}`));
